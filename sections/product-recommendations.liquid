<div class="page-width">
    <div class="product-recommendations py-6 mb-10" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=8">
 
    {%- if recommendations.performed and recommendations.products_count > 0 -%}
      <h2 class="uppercase text-2xl tracking-[2.5px] font-bold text-center">Tambi√©n te puede interesar</h2>
      <div x-data="{swiper : null}"
      x-init="swiper = new Swiper($refs.slider_wrapper, {
         slidesPerView: 4.2,
        spaceBetween: 16,

        breakpoints:{
            150:{
                slidesPerView: 1.2 
            },
            550:{
                slidesPerView: 2.2
            },
            800:{
                slidesPerView: 3.2 
            },
            1200:{
                slidesPerView: 4.2
            }
        }
      })"
      >
        <div class="flex justify-end mb-4">
          <button class="p-2" @click="swiper.slidePrev()">
              {% render 'icon-arrow', class: 'w-8 rotate-180' %}
          </button>
          <button class="p-2" @click="swiper.slideNext()">
              {% render 'icon-arrow', class: 'w-8' %} 
          </button>
        </div>
        <div class="swiper-container overflow-hidden" x-ref="slider_wrapper">
          <ul class="swiper-wrapper" id="Recommendations">
            {%- for recommendation in recommendations.products -%}
              {% render 'card-product-fixed', product_card: recommendation, class: 'swiper-slide' %}
            {%- endfor -%}
          </ul>
        </div>   
      </div>    
    {%- endif -%}
    </div>
</div>


{% javascript %}
  const handleIntersection = (entries, observer) => {
    if (!entries[0].isIntersecting) return;

    observer.unobserve(productRecommendationsSection);

    const url = productRecommendationsSection.dataset.url;

    fetch(url)
      .then(response => response.text())
      .then(text => {
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('.product-recommendations');

        if (recommendations && recommendations.innerHTML.trim().length) {
          productRecommendationsSection.innerHTML = recommendations.innerHTML;
        }
      })
      .catch(e => {
        console.error(e);
      });
  };

  const productRecommendationsSection = document.querySelector('.product-recommendations');
  const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});
  console.log(observer)
  observer.observe(productRecommendationsSection);
{% endjavascript %}

{% schema %}
  {
    "name": "Product recommendations",
    "settings": []
  }
{% endschema %}
